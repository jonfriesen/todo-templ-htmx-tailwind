// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password, created_at, updated_at) 
VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, name, email, password, created_at, updated_at, deleted_at, validated_at
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ValidatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users 
SET deleted_at = CURRENT_TIMESTAMP 
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, created_at, updated_at, deleted_at, validated_at 
FROM users 
WHERE email = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ValidatedAt,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password, created_at, updated_at, deleted_at, validated_at 
FROM users 
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ValidatedAt,
	)
	return &i, err
}

const isUserValidated = `-- name: IsUserValidated :one
SELECT CASE 
         WHEN validated_at IS NOT NULL THEN 1 
         ELSE 0 
       END as is_validated
FROM users
WHERE id = ?
`

func (q *Queries) IsUserValidated(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, isUserValidated, id)
	var is_validated int64
	err := row.Scan(&is_validated)
	return is_validated, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users 
SET password = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ?
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg *UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.ID)
	return err
}
