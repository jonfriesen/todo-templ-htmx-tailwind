// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: todos.sql

package db

import (
	"context"
)

const completeTodo = `-- name: CompleteTodo :exec
UPDATE todo_items
SET
    complete = CASE WHEN complete = 0 THEN 1 ELSE 0 END,
    completed_at = CASE WHEN complete = 0 THEN CURRENT_TIMESTAMP ELSE NULL END
WHERE id = ?
`

func (q *Queries) CompleteTodo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, completeTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, description, complete, created_at, completed_at FROM todo_items WHERE id = ?
`

func (q *Queries) GetTodo(ctx context.Context, id string) (*TodoItem, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i TodoItem
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Complete,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return &i, err
}

const insertTodo = `-- name: InsertTodo :exec
INSERT INTO todo_items (id, description, complete)
VALUES (?, ?, ?)
`

type InsertTodoParams struct {
	ID          string `json:"id"`
	Description string `json:"description"`
	Complete    bool   `json:"complete"`
}

func (q *Queries) InsertTodo(ctx context.Context, arg *InsertTodoParams) error {
	_, err := q.db.ExecContext(ctx, insertTodo, arg.ID, arg.Description, arg.Complete)
	return err
}

const listTodos = `-- name: ListTodos :many
SELECT id, description, complete, created_at, completed_at FROM todo_items
`

func (q *Queries) ListTodos(ctx context.Context) ([]*TodoItem, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TodoItem
	for rows.Next() {
		var i TodoItem
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Complete,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
